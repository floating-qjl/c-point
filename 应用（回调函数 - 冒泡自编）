#define _CRT_SECURE_NO_WARNINGS 1
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
void swap(char* e1, char* e2,int size)
{
	int a = 0;
	for (a = 0;a < size;a++)
	{
		char tmp = *e1;
		*e1 = *e2;
		*e2 = tmp;
		e1++;
		e2++;
	}
}
void bubble_sort(void* base, int sz, int size, int(*cmp)(const void* e1,const void* e2))
{
	int a = 0;
	for (a = 0;a < sz - 1;a++)
	{
		int b = 0;
		for (b = 0;b < sz - 1 - a;b++)
		{
			if (cmp((char*)base+b*size, (char*)base+(b+1)*size) > 0)
				swap((char*)base+b*size,(char*)base+(b+1)*size,size);
		}
	}
}
struct stu
{
	char name[20];
	int age;
};
int test_d(const void* e1, const void* e2)
{
	return strcmp(((struct stu*)e1)->name,((struct stu*)e2)->name);
}
int test_c(const void* e1, const void* e2)
{
	return ((struct stu*)e1)->age - ((struct stu*)e2)->age;
}
int test_b(const void* e1, const void* e2)
{
	if ( * (float*)e1 > *(float*)e2  )	
		return 1;	
	else if (*(float*)e1 == *(float*)e2)	
		return 0;	
	else
		return -1;
}
int test_a(const void* e1, const void* e2)
{
	return *(int*)e1 - *(int*) e2;
}
void test1()
{
	int arr[10] = { 1,3,2,4,5,6,10,8,9,7 };
	int sz = sizeof(arr) / sizeof(arr[0]);
	bubble_sort(arr, sz, sizeof(arr[0]), test_a);
	int a = 0;
	for (a = 0;a < sz;a++)
	{
		printf("%d ", arr[a]);
	}
}
void test2()
{
	float arr[5] = { 3.1 ,2.5 ,1.2 ,4.0 ,5.0 };
	int sz = sizeof(arr) / sizeof(arr[0]);
	bubble_sort(arr, sz, sizeof(arr[0]), test_b);
	int a = 0;
	for (a = 0;a < sz;a++)
	{
		printf("%f ", arr[a]);
	}
}
void test3()
{
	struct stu s[3] = { {"zhangsan",30},{"lisi",23},{"jaimianqishi",10} };
	int sz = sizeof(s) / sizeof(s[0]);
	bubble_sort(s, sz, sizeof(s[0]), test_c);
	int a = 0;
	for (a = 0; a < sz;a++)
	{
		printf(" %s  %d", s[a].name, s[a].age);
	}
}
void test4()
{
	struct stu s[3] = { {"a",30},{"c",23},{"b",10} };
	int sz = sizeof(s) / sizeof(s[0]);
	bubble_sort(s, sz, sizeof(s[0]), test_d);
	int a = 0;
	for (a = 0; a < sz;a++)
	{
		printf(" %s  %d", s[a].name, s[a].age);
	}
}
int main()
{
	test1();
	printf("\n");
	test2();
	printf("\n");
	test3();
	printf("\n");
	test4();
	printf("\n");

	return 0;
}
