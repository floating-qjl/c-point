#define _CRT_SECURE_NO_WARNINGS 1
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct stu
{
	char name[20];
	int age;
};
int test_d(const void* e1, const void* e2)
{
	return strcmp(((struct stu*)e1)->name,((struct stu*)e2)->name);
	//名字比较即字符串比较
	//strcmp返回值与qsort一致，因此可以直接返回
}
int test_c(const void* e1, const void* e2)
{
	return ((struct stu*)e1)->age - ((struct stu*)e2)->age;
}
int test_b(const void* e1, const void* e2)
{
	if ( * (float*)e1 > *(float*)e2  )	
		return 1;	
	else if (*(float*)e1 == *(float*)e2)	
		return 0;	
	else
		return -1;
	//如果两者相减为0.5，则强制类型转化成int*的话解引用后变为0，因此不能直接return
}
int test_a(const void* e1, const void* e2)
{
	return *(int*)e1 - *(int*) e2;
	//e1,e2为两个数值的地址，解引用后进行数值比较
	//若e1<e2，则返回负数；若e1>e2，则返回正数；若e1=e2，则返回0
}
//void qsort(void* base,
//	       size_t num,
//	       size_t width,
//           int( *cmp)(const void *e1,const void *e2));
//qsort库函数使用，数组地址，元素个数，元素大小，比较函数(比较两个数值的地址)
void test1()
{
	int arr[10] = { 1,3,2,4,5,6,10,8,9,7 };
	int sz = sizeof(arr) / sizeof(arr[0]);
	qsort(arr, sz, sizeof(arr[0]), test_a);
	int a = 0;
	for (a = 0;a < sz;a++)
	{
		printf("%d ", arr[a]);
	}
}
void test2()
{
	float arr[5] = { 3.1 ,2.5 ,1.2 ,4.0 ,5.0 };
	int sz = sizeof(arr) / sizeof(arr[0]);
	qsort(arr, sz, sizeof(arr[0]), test_b);
	int a = 0;
	for (a = 0;a < sz;a++)
	{
		printf("%f ", arr[a]);
	}
}
void test3()
{
	struct stu s[3] = { {"zhangsan",30},{"lisi",23},{"jaimianqishi",10} };
	int sz = sizeof(s) / sizeof(s[0]);
	qsort(s, sz, sizeof(s[0]), test_c);
	int a = 0;
	for (a = 0; a < sz;a++)
	{
		printf(" %s  %d", s[a].name, s[a].age);
	}
}
void test4()
{
	struct stu s[3] = { {"a",30},{"c",23},{"b",10} };
	int sz = sizeof(s) / sizeof(s[0]);
	qsort(s, sz, sizeof(s[0]), test_d);
	int a = 0;
	for (a = 0; a < sz;a++)
	{
		printf(" %s  %d", s[a].name, s[a].age);
	}
}
int main()
{
	//void* 类型的指针 可以接受任意类型的指针
	//void* 类型的指针 不能进行解引用操作
	//void* 类型的指针 不能进行+-*/整数的操作
	test1();
	printf("\n");
	test2();
	printf("\n");
	test3();
	printf("\n");
	test4();
	printf("\n");

	return 0;
}
